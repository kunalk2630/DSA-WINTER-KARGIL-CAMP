//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    
    int f(int idx,int W, int wt[], int val[], int n,vector<vector<int>> &dp){
        
        if(idx==0){
            
            if(wt[idx]<=W){
                
                return val[idx];
            }
            else{
                
                return 0;
            }
        }
        if(dp[idx][W]!=-1){
            
            return dp[idx][W];
        }
      
        
        int op1=0+f(idx-1,W,wt,val,n,dp);
        int op2=INT_MIN;
        
        if(wt[idx]<=W){
            
            op2=val[idx]+f(idx-1,W-wt[idx],wt,val,n,dp);
        }
        
        return dp[idx][W]=max(op1,op2);
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>> dp(n+1,vector<int>(W+1,0));
       for(int idx=wt[0];idx<=W;idx++){
           
           
           
                dp[0][idx]=val[0];
           
       }
       for(int i=1;i<n;i++){
           
           for(int j=0;j<=W;j++){
               
               int op1=0+dp[i-1][j];
               int op2=INT_MIN;
                
                if(wt[i]<=j){
                    
                    op2=val[i]+dp[i-1][j-wt[i]];
                }
                
                 dp[i][j]=max(op1,op2);
           }
       }
       return dp[n-1][W];
    }
};

//{ Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}
// } Driver Code Ends
