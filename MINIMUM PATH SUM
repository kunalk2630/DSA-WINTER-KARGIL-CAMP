class Solution {
public:
    
    /*

    //MEMOISATION
    int f(int i,int j,vector<vector<int>>& grid,vector<vector<int>> &dp){

        if(i==0 && j==0){

            return grid[0][0];
        }

        if(i<0 || j<0){

            return 1e9;
        }

        if(dp[i][j]!=-1){

            return dp[i][j];
        }

        int op1=grid[i][j]+f(i-1,j,grid,dp);
        int op2=grid[i][j]+f(i,j-1,grid,dp);

        return dp[i][j]=min(op1,op2);
    }

    */

    int minPathSum(vector<vector<int>>& grid) {
        
        /*


        //TABULATION
        int n=grid.size();
        int m=grid[0].size();

        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));

        for(int i=0;i<n;i++){

            for(int j=0;j<m;j++){

                if(i==0 && j==0){

                    dp[i][j]=grid[0][0];
                    continue;
                }

                int op1=INT_MAX;
                int op2=INT_MAX;

                if(i>0){

                    op1=grid[i][j]+dp[i-1][j];

                }

                if(j>0){

                     op2=grid[i][j]+dp[i][j-1];
                }

                 dp[i][j]=min(op1,op2);


            }
        }
        return dp[n-1][m-1];

        */

        //SPACE OPTIMISATION

        int n=grid.size();
        int m=grid[0].size();

        vector<int> prev(n+1,0);

        for(int i=0;i<n;i++){

            vector<int> curr(m+1,0);

            for(int j=0;j<m;j++){

                if(i==0 && j==0){

                    curr[j]=grid[0][0];
                    continue;
                }

                int op1=INT_MAX;
                int op2=INT_MAX;

                if(i>0){

                    op1=grid[i][j]+prev[j];

                }

                if(j>0){

                     op2=grid[i][j]+curr[j-1];
                }

                 curr[j]=min(op1,op2);


            }

            prev=curr;
        }
        return prev[m-1];


        
    }
};
